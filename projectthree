# student id : 02991862
#N= 31
#M = 21
#beta = 'u'
#Delta = 'U'

.data
input : .space 10 # creating space of 1000 characters for the input
invalid_message: .asciiz "-" #error message shows hyphen
newline: .asciiz "\n" #newline for every code
comma: .asciiz "," # comma for the output of the integer value
semi_colon: .asciiz ";" # semi-colon to read distinguish the different colon values


.text 
text_input:
li $v0, 8 #initialize reg $v0 to take the input from the user
la $a0, input # load the address of the input to $a0 register
li $a1, 11 #the final address of the input from the user, cannot be more than a 1000 characters.
syscall #use the system call 

add $t5, $a0, $zero #store the address of the first string to $t5
li $s3, 31 #store $s3 with my base value.

#li $t1, 1 #store the total number of strings
#addi $t5, $a0, 0 #store the address from $a0 to $t2
#j semi_colon_address

#semi_colon_address:
#la $t0, semi_colon #store the address of semi colon to $s0
#lb $s1, 0($t0) #store the byte equivalent of semi-colon to $s1 register

#number_of_strings:
#sub $t4, $t5, $s4
#beq $t4, $a1, stack_pointer
#lb $t3, 0($t5) #store the ascii equivalent of the data stored in $t2 reg in $t3 register 
#beq $t3, $s1, string_increment #If equal to semi-colon increments the number of strings
#bne $t3, $s1, loop_increment #if not equal increments the loop

#string_increment:
#addi $t1, $t1, 1 #increment the value of strings if it encounters semi-colon
#j loop_increment

#loop_increment:
#addi $t5, $t5, 1
#j number_of_strings


stack_pointer:
add $sp, $sp, -8 #change the top of stack
sw $fp, 0($sp)
addi $fp, $sp, 0 #store the value of the top of stack 
add $sp, $t5, $zero  #store the address in $t5 into top of stack 

addi $a0, $t5, 0
jal sub_a

sub_a:

sw $ra, 4($sp)                    #store the return value to $t3
jal sub_b				#call the sub_b
add $t3, $v0, $zero			#store the passed parameter to $t3, whether it be invalid message or integer value 

beq $t3, 45, print_errormessage		#if the passed parameter is equal to 45 then error
j print_integervalue 


print_integervalue:
li $v0, 1
add $a0, $t3, $zero
syscall
j print_comma



print_errormessage:
li $v0,4
la, $a0,invalid_message
syscall

print_comma:
li $v0, 4
la $a0, comma
syscall



sub_b:

InitializeVariables:
li $t2, 0 #store the sum of the values
li $t8, 0 #counter for the calculation part
li $t7, 0 #store the i -1 part of the calculation 
li $s6, 1

trailingwhitespaces:         
move $a1,$t5              # move the address to a1 registers, to pass as a parameter
addi $a0, $zero, 0        #change a0, to 0
add $t3, $a0, $a1 
jal FirstString            #function definition, to call the address of the first character that exists
move $t0, $v0             #create a variable to store the value passed from the subprogram to store the first character

move $a1,$t0            #then copy the value of the first string to reg a1
addi $a0, $zero, 0 
add $t1, $a1, $zero       #change a0, to 0
jal LastString          #function definition to call the last character of the string
move $t6, $v0           #create a variable to store the value passed from the subprogram to store the last character

Length:
subu $s2,$t6,$t0        #calculate the total number of charcaters in the string


InvalidChar:
ZeroCharacters:
beqz $s2, print_invalid   #if there are zero characteres print that it is invalid
Morethan4:
bgt $s2, 4, print_invalid   # if more than 4 characters print that it is invalid

j calc


FirstString:
lb $t0, 0($t3)      #store the first byte to t4
bne $t0, 32, PassAddress   #check if not equal to empty space jump to address
#beq $t1, $t0, print_invalid   #check the end of the string, this is for empty string
addi $t3, $t3, 1      #increment the address
j FirstString                #go back to the loop
PassAddress:          
move $v0, $t3        #copy it to pass as a parameter
jr $ra

LastString:
lb $t7, 0($t1)          # load the first byte into t6
beq $t7, 32, EndofString    #compare to empty space
beq $t7, 59, EndofStringsegment
addi $t1, $t1, 1        #increment the loop
j LastString
EndofString:
move $v0, $t1      #copy to pass parameter
jr $ra

EndofStringsegment: # changes the TOS value that was the initial address to new address

addi $sp,  $t3, -1        #change the TOS to the new value but with a subtracted top of stack
j EndofString  #then jump to end of string value

calc:
addi $s4, $s2, -1

Calculation:
move $a0, $t0
jal Setofcharacters 
move $t9, $v0
beq $s4, $zero, powerzero   #if equal to zero print the sum
powervalue:
beq $s4 , 3, powerthree
beq $s4, 2, powertwo
beq $s4, 1, powerone
#beq $s4, 0, powerzero

powerthree:

mult $t9, $s3
mflo $s5
mult $s5,$s3
mflo $s5
mult $s5, $s3
mflo $s5
add $t2, $s5, $t2

j ml

powertwo:

mult $t9, $s3
mflo $s5
mult $s5,$s3
mflo $s5

add $t2, $s5, $t2

j ml

powerone:
mult $t9, $s3
mflo $s5
add $t2, $s5, $t2
j ml



ml:
addi $s4, $s4 , -1
addi $s0, $s0,1
j Calculation

powerzero:
mult $t9, $s6
mflo $s5
add $t2, $s5, $t2
j print_sum

Setofcharacters:
lb $t6, 0($a0)                         # load the value of the first charcater to the reg t6
blt $t6, 48, Invalid
blt $t6, 57, Numbers
blt $t6, 65, Invalid
blt $t6, 85, UpperCase
blt $t6, 97, Invalid
blt $t6, 117, LowerCase
bge $t6, 117, Invalid

Numbers:
addi $t4, $t6, -48
j Passvalue

UpperCase:
addi $t4, $t6, -55
j Passvalue


LowerCase:
addi $t4, $t6, -87
j Passvalue


LessThanequalto4:
bgt $t4, 4, Invalid
j Passvalue

Passvalue:
move $v0, $t4   #to pass the value in the register
jr $ra
#j Calculation

Invalid:
j print_invalid

print_invalid:
li $v0, 52
jr $ra

#print_sum:
#li $v0, 1
#add $a0, $t2, $zero
#syscall
#j Exit

print_sum:
addi $v0, $t2,0
jr $ra
                           

Exit:
lw $fp, 0($sp)    #Restore frame info
addi $sp, $sp, 8

li $v0, 10 
syscall
