# student id : 02991862
#N= 31
#M = 21
#beta = 'u'
#Delta = 'U'

.data
input : .space 1000 # creating space of 1000 characters for the input
invalid_message: .asciiz "-" #error message shows hyphen
newline: .asciiz "\n" #newline for every code
comma: .asciiz "," # comma for the output of the integer value
semi-colon: .asciiz ";" # semi-colon to read distinguish the different colon values\


.text 
text_input:
li $v0, 8 #initialize reg $v0 to take the input from the user
la $a0, input # load the address of the input to $a0 register
la $a1, 1001 #the final address of the input from the user, cannot be more than a 1000 characters.
syscall #use the system call 

li $s3, 1 #store the total number of strings

number_of_strings:
la $t0, semi-colon #store the address of semi colon to $s0
lb $s1, 0($t0) #store the byte equivalent of semi-colon to $s1 register
beq $s1, 59, increment

increment:
addi $s3, $s3, 1
j String_Loop
String_Loop:


stack_pointer:
add $sp, $sp, -4 #change the top of stack
sw $fp, 0($sp)
addi $fp, $sp, 0 #store the value of the top of stack 








addi $sp
sub_a:










